{"version":3,"sources":["../src/util/parser.ts","../src/dmmfToSchema.ts","../src/schemaToDmmf.ts","../src/index.ts"],"sourcesContent":["import {\n  type ConnectorType,\n  type DataSource,\n  type DMMF,\n  type EnvValue,\n  type GeneratorConfig,\n} from \"@prisma/generator-helper\";\nimport { printGeneratorConfig } from \"@prisma/engine-core\";\n\nexport interface Field {\n  kind: DMMF.FieldKind;\n  name: string;\n  isRequired: boolean;\n  isList: boolean;\n  isUnique: boolean;\n  isId: boolean;\n  type: string;\n  dbNames: string[] | null;\n  isGenerated: boolean;\n  hasDefaultValue: boolean;\n  relationFromFields?: any[];\n  relationToFields?: any[];\n  relationOnDelete?: string;\n  relationName?: string;\n  default: boolean | any;\n  isUpdatedAt: boolean;\n  isReadOnly: string;\n  columnName?: string;\n}\n\nexport interface Attribute {\n  isUnique: boolean;\n  isId: boolean;\n  dbNames: string[] | null;\n  relationFromFields?: any[];\n  relationToFields?: any[];\n  relationOnDelete?: string;\n  relationName?: string;\n  isReadOnly: string;\n  default?: boolean | any;\n  isGenerated: boolean;\n  isUpdatedAt: boolean;\n  columnName?: string;\n  comment?: string;\n}\n\nexport interface Model extends DMMF.Model {\n  uniqueFields: string[][];\n}\n\nconst handlers = (type: string, kind: DMMF.FieldKind) => {\n  return {\n    default: (value: unknown) => {\n      if (kind === \"enum\") {\n        return `@default(${value})`;\n      }\n\n      if (type === \"Boolean\") {\n        return `@default(${value})`;\n      }\n\n      if (typeof value === \"undefined\" || value === null) {\n        return \"\";\n      }\n\n      if (typeof value === \"object\") {\n        return `@default(${value.name}(${value.args}))`;\n      }\n\n      if (typeof value === \"number\") {\n        return `@default(${value})`;\n      }\n\n      if (typeof value === \"string\") {\n        return `@default(\"${value}\")`;\n      }\n\n      throw new Error(`Unsupported field attribute ${value}`);\n    },\n    isId: (value: string) => (value ? \"@id\" : \"\"),\n    isUnique: (value: string) => (value ? \"@unique\" : \"\"),\n    dbNames: (value: string) => {},\n    dbName: (value: string) => (value ? `@map(\"${value}\")` : \"\"),\n    native: (value: string) => (value ? `${value}` : \"\"),\n    relationToFields: (value: string) => {},\n    relationOnDelete: (value: string) => {},\n    hasDefaultValue: (value: string) => {},\n    relationName: (value: string) => {},\n    documentation: (value: string) => {},\n    isReadOnly: (value: string) => {},\n    isGenerated: (value: string) => {},\n    isUpdatedAt: (value: string) => (value ? \"@updatedAt\" : \"\"),\n    columnName: (value: string) => (value ? `@map(\"${value}\")` : \"\"),\n    comment: (value: string) => (value ? `//${value}` : \"\"),\n  };\n};\n\nfunction handleAttributes(\n  attributes: Attribute,\n  kind: DMMF.FieldKind,\n  type: string\n) {\n  const { relationFromFields, relationToFields, relationName } = attributes;\n  if (kind === \"scalar\") {\n    return `${Object.keys(attributes)\n      // @ts-ignore\n      .map((each) => handlers(type, kind)[each](attributes[each]))\n      .join(\" \")}`;\n  }\n\n  if (kind === \"object\" && relationFromFields) {\n    return relationFromFields.length > 0\n      ? `@relation(name: \"${relationName}\", fields: [${relationFromFields}], references: [${relationToFields}])`\n      : `@relation(name: \"${relationName}\") ${\n          attributes?.comment ? \"//\" + attributes.comment : \"\"\n        }`;\n  }\n\n  if (kind === \"enum\")\n    return `${Object.keys(attributes)\n      // @ts-ignore\n      .map((each) => handlers(type, kind)[each](attributes[each]))\n      .join(\" \")}`;\n\n  return \"\";\n}\n\nfunction handleFields(fields: Field[]) {\n  return fields\n    .map((fields) => {\n      const { name, kind, type, isRequired, isList, ...attributes } = fields;\n      if (kind === \"scalar\") {\n        return `  ${name} ${type}${\n          isList ? \"[]\" : isRequired ? \"\" : \"?\"\n        } ${handleAttributes(attributes, kind, type)}`;\n      }\n\n      if (kind === \"object\") {\n        return `  ${name} ${type}${\n          isList ? \"[]\" : isRequired ? \"\" : \"?\"\n        } ${handleAttributes(attributes, kind, type)}`;\n      }\n\n      if (kind === \"enum\") {\n        return `  ${name} ${type}${\n          isList ? \"[]\" : isRequired ? \"\" : \"?\"\n        } ${handleAttributes(attributes, kind, type)}`;\n      }\n      if ((kind as any) === \"comment\") {\n        return `//${name}`;\n      }\n\n      throw new Error(`Unsupported field kind \"${kind}\"`);\n    })\n    .join(\"\\n\");\n}\n\nfunction handleIdFields(idFields: string[]) {\n  return idFields && idFields.length > 0\n    ? `@@id([${idFields.join(\", \")}])`\n    : \"\";\n}\n\nfunction handleUniqueFieds(uniqueFields: string[][]) {\n  return uniqueFields.length > 0\n    ? uniqueFields\n        .map((eachUniqueField) => `@@unique([${eachUniqueField.join(\", \")}])`)\n        .join(\"\\n\")\n    : \"\";\n}\n\nfunction handleDbName(dbName: string | null) {\n  return dbName ? `@@map(\"${dbName}\")` : \"\";\n}\n\nfunction handleUrl(envValue: EnvValue) {\n  const value = envValue.fromEnvVar\n    ? `env(\"${envValue.fromEnvVar}\")`\n    : envValue.value;\n\n  return `url = ${value}`;\n}\n\nfunction handleProvider(provider: ConnectorType | string) {\n  return `provider = \"${provider}\"`;\n}\n\nfunction deserializeModel(model: Model) {\n  const { name, uniqueFields, dbName, idFields, index } = model;\n  const fields = model.fields as unknown as Field[];\n\n  const output = `\nmodel ${name} {\n${handleFields(fields)}\n${handleUniqueFieds(uniqueFields)}\n${handleDbName(dbName)}\n${handleIdFields(idFields)}\n${index || \"\"}\n}`;\n  return output;\n}\n\nfunction deserializeDatasource(datasource: DataSource) {\n  const { activeProvider: provider, name, url } = datasource;\n\n  return `\ndatasource ${name} {\n\t${handleProvider(provider)}\n\t${handleUrl(url)}\n}`;\n}\n\nfunction deserializeEnum({ name, values, dbName }: DMMF.DatamodelEnum) {\n  const outputValues = values.map(({ name, dbName }) => {\n    let result = name;\n    if (name !== dbName && dbName) result += `@map(\"${dbName}\")`;\n    return result;\n  });\n  return `\nenum ${name} {\n\t${outputValues.join(\"\\n\\t\")}\n\t${handleDbName(dbName || null)}\n}`;\n}\n\nexport async function dmmfModelsdeserializer(models: Model[]) {\n  return models.map((model) => deserializeModel(model)).join(\"\\n\");\n}\n\nexport async function datasourcesDeserializer(datasources: DataSource[]) {\n  return datasources\n    .map((datasource) => deserializeDatasource(datasource))\n    .join(\"\\n\");\n}\n\nexport async function generatorsDeserializer(generators: GeneratorConfig[]) {\n  return generators\n    .map((generator) => printGeneratorConfig(generator))\n    .join(\"\\n\");\n}\n\nexport async function dmmfEnumsDeserializer(enums: DMMF.DatamodelEnum[]) {\n  return enums.map((each) => deserializeEnum(each)).join(\"\\n\");\n}\n","import {\n  datasourcesDeserializer,\n  dmmfEnumsDeserializer,\n  dmmfModelsdeserializer,\n  generatorsDeserializer,\n} from \"./util/parser\";\nimport { type ConfigMetaFormat, formatSchema } from \"@prisma/internals\";\nimport { type DMMF } from \"@prisma/generator-helper\";\n\nexport const dmmfToSchema = async ({\n  dmmf: { models, enums },\n  config: { datasources, generators },\n}: {\n  dmmf: DMMF.Document[\"datamodel\"];\n  config: ConfigMetaFormat;\n}) => {\n  const outputSchema = [\n    await datasourcesDeserializer(datasources),\n    await generatorsDeserializer(generators),\n    await dmmfModelsdeserializer(models),\n    await dmmfEnumsDeserializer(enums),\n  ]\n    .filter((e) => e)\n    .join(\"\\n\\n\\n\");\n\n  return await formatSchema({ schema: outputSchema });\n};\n","import { getConfig, getDMMF } from \"@prisma/internals\";\nimport stripAnsi from \"strip-ansi\";\n\nexport interface SchemaError {\n  reason: string;\n  row: string;\n}\n\nexport enum ErrorTypes {\n  Prisma,\n  Other,\n}\n\nexport const schemaToDmmf = async (schema: string) => {\n  try {\n    const { datamodel } = await getDMMF({\n      datamodel: schema,\n    });\n    const config = await getConfig({\n      datamodel: schema,\n      ignoreEnvVarErrors: true,\n    });\n\n    const lines = schema.split(\"\\n\");\n    let model = \"\";\n    lines.forEach((line, index) => {\n      if (line.includes(\"model\")) model = line.trim().split(\" \")[1];\n      if (line.includes(\"@db\")) {\n        const lineWords = line.trim().split(\" \");\n        const field = lineWords[0];\n        const nativeAttribute = lineWords[2];\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n        const dmmfField = dmmfModel?.fields.find((f) => f.name === field);\n\n        if (dmmfField) dmmfField[\"native\"] = nativeAttribute;\n      }\n      if (line.includes(\"//\")) {\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n        const lineWords = line.trim().split(\" \");\n        const comment = line.trim().split(\"//\")[1];\n        const isCommentLine = lineWords[0].includes(\"//\");\n        if (!isCommentLine) {\n          const field = lineWords[0];\n          const dmmfField = dmmfModel?.fields.find((f) => f.name === field);\n          if (dmmfField) dmmfField[\"comment\"] = comment;\n        } else {\n          const lastLine = lines[index - 1];\n          const lineWords = lastLine.trim().split(\" \");\n          const field = lineWords[0];\n          if (field === \"model\") {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            dmmfModel?.fields.unshift({\n              kind: \"comment\",\n              name: comment,\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } as any);\n          } else {\n            const dmmfFieldIndex = dmmfModel?.fields.findIndex(\n              (f) => f.name === field\n            );\n            if (dmmfFieldIndex)\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              dmmfModel?.fields.splice(dmmfFieldIndex + 1, 0, {\n                kind: \"comment\",\n                name: comment,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              } as any);\n          }\n        }\n      }\n      if (line.includes(\"@@index\")) {\n        const index = line.trim();\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n\n        if (dmmfModel) dmmfModel[\"index\"] = index;\n      }\n    });\n\n    return { datamodel, config };\n  } catch (error) {\n    const message = stripAnsi((error as Error).message);\n    let errors: SchemaError[];\n    let errType: ErrorTypes;\n\n    if (message.includes(\"error: \")) {\n      errors = parseDMMFError(message);\n      errType = ErrorTypes.Prisma;\n    } else {\n      console.error(error);\n      errors = [{ reason: message, row: \"0\" }];\n      errType = ErrorTypes.Other;\n    }\n\n    return { errors, type: errType };\n  }\n};\n\nconst errRegex =\n  /^(?:Error validating.*?:)?(.+?)\\n  -->  schema\\.prisma:(\\d+)\\n/;\n\nconst parseDMMFError = (error: string): SchemaError[] =>\n  error\n    .split(\"error: \")\n    .slice(1)\n    .map((msg) => msg.match(errRegex)!.slice(1))\n    .map(([reason, row]) => ({ reason, row }));\n","export * from \"./dmmfToSchema\";\nexport * from \"./schemaToDmmf\";\nexport * from \"@prisma/generator-helper\";\nexport { type ConfigMetaFormat } from \"@prisma/internals\";\n"],"mappings":"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","names":["printGeneratorConfig","handlers","type","kind","value","handleAttributes","attributes","relationFromFields","relationToFields","relationName","each","handleFields","fields","name","isRequired","isList","handleIdFields","idFields","handleUniqueFieds","uniqueFields","eachUniqueField","handleDbName","dbName","handleUrl","envValue","handleProvider","provider","deserializeModel","model","index","deserializeDatasource","datasource","url","deserializeEnum","values","outputValues","result","dmmfModelsdeserializer","models","datasourcesDeserializer","datasources","generatorsDeserializer","generators","generator","dmmfEnumsDeserializer","enums","formatSchema","dmmfToSchema","models","enums","datasources","generators","outputSchema","datasourcesDeserializer","generatorsDeserializer","dmmfModelsdeserializer","dmmfEnumsDeserializer","e","getConfig","getDMMF","stripAnsi","ErrorTypes","schemaToDmmf","schema","datamodel","config","lines","model","line","index","lineWords","field","nativeAttribute","dmmfModel","m","dmmfField","f","comment","dmmfFieldIndex","error","message","errors","errType","parseDMMFError","errRegex","msg","reason","row"]}